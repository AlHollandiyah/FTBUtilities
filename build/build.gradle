buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'forge'
apply plugin: 'maven'

repositories {
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven { // the repo from which to get NEI and stuff
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
}

dependencies {
    compile "mcp.mobius.waila:Waila:1.5.6_dev1_1.7.10"
}

ext.configFile = file "build.props"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

ext.configModFile = file "build.props_mod"

configModFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config_mod = new ConfigSlurper().parse prop
}

version = config.version_mc + "-" + config.version_mods
group = "latmod.core"
archivesBaseName = config_mod.name

minecraft {
    version = config.version_mc + "-" + config.version_forge
    runDir = "eclipse/assets"
    
    replace "@VERSION@", config.version_mods
    replaceIn "LC.java"
}

sourceSets {
    main {
        java {
            if(config_mod.hasApi)
                srcDir "sources/" + config_mod.name + "/src/main/java"
			
			srcDir "sources/" + config_mod.name + "/src/main/api"
        }
        resources {
            srcDir "sources/" + config_mod.name + "/src/main/resources"
        }
    }
}

tasks.withType(Jar)
{
    destinationDir = file("$rootDir/sources/Exported")
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

build.dependsOn deobfJar