package com.feed_the_beast.ftbu.gui;

import com.feed_the_beast.ftbl.lib.client.ImageProvider;
import com.feed_the_beast.ftbl.lib.info.InfoPage;
import com.feed_the_beast.ftbl.lib.info.ItemPageIconRenderer;
import com.feed_the_beast.ftbl.lib.info.TexturePageIconRenderer;
import com.feed_the_beast.ftbu.api.guide.GuideFormat;
import com.feed_the_beast.ftbu.api.guide.GuideType;
import com.feed_the_beast.ftbu.api.guide.IGuide;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.text.TextComponentString;
import net.minecraft.util.text.TextComponentTranslation;
import net.minecraftforge.fml.common.ModContainer;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

/**
 * Created by LatvianModder on 02.10.2016.
 */
public class InfoPageGuide implements IGuide
{
    private final InfoPage page;
    private final GuideType type;
    private final GuideFormat format;
    private final List<String> authors;
    private final List<String> guideAuthors;

    public InfoPageGuide(String id, GuideType t, Collection<String> _authors, Collection<String> _guideAuthors)
    {
        page = new InfoPage(id);
        type = t;
        format = GuideFormat.JSON;
        authors = _authors.isEmpty() ? Collections.emptyList() : new ArrayList<>(_authors);
        guideAuthors = _guideAuthors.isEmpty() ? Collections.emptyList() : new ArrayList<>(_guideAuthors);
    }

    public InfoPageGuide(ModContainer mod)
    {
        this(mod.getModId(), GuideType.MOD, mod.getMetadata().authorList, Collections.singleton("Autogenerated"));

        if(!mod.getMetadata().description.isEmpty())
        {
            for(String s : mod.getMetadata().description.split("\n"))
            {
                page.println(s);
            }
        }

        page.setTitle(new TextComponentString(mod.getName()));
    }

    public InfoPageGuide(String id, JsonObject o)
    {
        page = new InfoPage(id);
        page.setTitle(new TextComponentTranslation(id + ".guide"));

        if(o.has("icon"))
        {
            page.setIcon(new TexturePageIconRenderer(new ImageProvider(new ResourceLocation(o.get("icon").getAsString()))));
        }
        else if(o.has("icon_item"))
        {
            page.setIcon(new ItemPageIconRenderer(o.get("icon_item")));
        }
        else
        {
            page.setIcon(new TexturePageIconRenderer(new ImageProvider(new ResourceLocation(id, "textures/icon.png"))));
        }

        type = o.has("type") ? GuideType.getFromString(o.get("type").getAsString()) : GuideType.OTHER;
        format = o.has("format") ? GuideFormat.getFromString(o.get("format").getAsString()) : GuideFormat.JSON;

        List<String> l = new ArrayList<>();

        for(JsonElement e : o.get("authors").getAsJsonArray())
        {
            l.add(e.getAsString());
        }

        authors = Collections.unmodifiableList(l);

        l = new ArrayList<>();

        if(o.has("guide_authors"))
        {
            for(JsonElement e : o.get("guide_authors").getAsJsonArray())
            {
                l.add(e.getAsString());
            }
        }

        guideAuthors = Collections.unmodifiableList(l);
    }

    @Override
    public GuideType getType()
    {
        return type;
    }

    @Override
    public GuideFormat getFormat()
    {
        return format;
    }

    @Override
    public List<String> getAuthors()
    {
        return authors;
    }

    @Override
    public List<String> getGuideAuthors()
    {
        return guideAuthors;
    }

    @Override
    public InfoPage getPage()
    {
        return page;
    }
}